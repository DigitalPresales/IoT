 
// Include all your dependent libraries here
#include <NTPClient.h>
#include <WiFiUdp.h>
#include "FS.h"
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <WiFiManager.h>

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");
//Enter AWS thing endpoint here , make sure your region below is correct

const char* Keyin_AWS_endpoint = "aonpcnt3y9lfg-ats.iot.us-east-1.amazonaws.com";  

//Enable your network details here 
char ssid[]= "Type your Wi-Fi network id here";
const char* password = "Type your Wi-Fi password here";

void callback(char* topic, byte* payload, unsigned int length) {
Serial.print("User has sent message, pl. check [");
Serial.print(topic);
Serial.print("] ");
for (int i = 0; i < length; i++) {
Serial.print((char)payload[i]);
}
Serial.println();
}

WiFiClientSecure espClient;
PubSubClient client(Keyin_AWS_endpoint, 8883, callback, espClient); 
char msg[50];
int value = 0;
long lastMsg = 0;

void Fitness_Data_Processing() {
delay(12);
espClient.setBufferSizes(512, 512);
Serial.println();
Serial.print("Establishing connection to Physician portal");
Serial.println(ssid);

WiFi.begin(ssid, password);

while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print("-");
}

Serial.println("");
Serial.println("Network between Patient and Physician esablished");

timeClient.begin();
while(!timeClient.update()){
timeClient.forceUpdate();
}

espClient.setX509Time(timeClient.getEpochTime());

}

void reconnect() { 
while (!client.connected()) {
Serial.print("Setting up MQTT connection, Working hard ! :) ");
if (client.connect("FitnessThing")) {
Serial.println("Yes we have located Physician ");
//client.publish("PatientID-300", "Blood pressure - less than 120mm Hg diastolic:less than 80mm Hg");
client.publish("PatientID-300", "Heart rate - 60-100 beats per mins");
//client.publish("PatientID-300", "Blood Composition - 18% to 24%");
client.subscribe("FromPhysician");
} else {
Serial.print("Connection failed, rc=");
Serial.print(client.state());
Serial.println("Locating Physician again, hold on");

char buf[256];
espClient.getLastSSLError(buf,256);
Serial.print("WiFiClientSecure SSL error: ");
Serial.println(buf);
 
delay(5000);
}
}
}

void setup() {
  
//WiFiManager wifiManager;
//wifiManager.autoConnect("AP-NAME", "AP-PASSWORD");

Serial.begin(115200);
Serial.setDebugOutput(true); 
pinMode(LED_BUILTIN, OUTPUT);
Fitness_Data_Processing();
delay(1000);
if (!SPIFFS.begin()) {
Serial.println("Error in file system");
return;
}

Serial.print("Heap data: "); Serial.println(ESP.getFreeHeap());

 
File cert = SPIFFS.open("/cert.der", "r");  
if (!cert) {
Serial.println("Certificate failed to validate ");
}
else
Serial.println("Certificate validated successfully");
delay(1000);

if (espClient.loadCertificate(cert))
Serial.println("Certificate is loaded successfully");
else
Serial.println("Certificate couldnot be loaded");
File private_key = SPIFFS.open("/private.der", "r");
if (!private_key) {
Serial.println("Unable to validate private key");
}
else
Serial.println("Successfully validated private key");

delay(1000);

if (espClient.loadPrivateKey(private_key))
Serial.println("Private key loaded and activated");
else
Serial.println("Could not load private key, pl. check");


File ca = SPIFFS.open("/ca.der", "r");  
if (!ca) {
Serial.println("Couldnot open CA file, please verify ");
}
else
Serial.println("Successfully validated CA file");

delay(1000);

if(espClient.loadCACert(ca))
Serial.println("CA Key is loaded ");
else
Serial.println("CA file coulnot be loaded");

Serial.print("Heap Data: "); Serial.println(ESP.getFreeHeap());
}

void loop() {

if (!client.connected()) {
reconnect();
}
client.loop();

long now = millis();
if (now - lastMsg > 2000) {
++value;
lastMsg = now;
snprintf (msg, 75, "{\"message\": \"Blood pressure -less than 120mm Hg diastolic:less than 80mm Hg #%ld\"}", value);
//snprintf (msg, 75, "{\"message\": \"Heart rate - 60-100 beats per mins #%ld\"}", value);
//snprintf (msg, 75, "{\"message\": \"Blood Composition - 18% to 24% #%ld\"}", value);
Serial.print("Publish message: ");
Serial.println(msg);
client.publish("PatientID-300", msg);
Serial.print("Internal debug Heap Data: "); Serial.println(ESP.getFreeHeap());  
}
digitalWrite(LED_BUILTIN, LOW);  
delay(100); 
digitalWrite(LED_BUILTIN, HIGH); 
delay(100);  
}
